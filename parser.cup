/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.Scanner;
import java.util.ArrayList;  

parser code {:
  protected Lexer lexer;
  public tablaSimbolos tabla = new tablaSimbolos();
  ArrayList listID = new ArrayList();
  ArrayList listIDFlujo = new ArrayList();
  public void syntax_error(Symbol s) {
    report_error("Se ha producido un error de sintaxis. Por favor revise el input introducido.\n", null);
  }
:};

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("pruebaCorrectas.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal           SEMI, PLUS, MINUS, TIMES, DIVISION, UMINUS, LPAREN, RPAREN,
EQUAL, TRUE, FALSE, ASIGNATION, MORETHAN, LESSTHAN, ISEQUAL, AND, NOT, OR, 
FINMIENTRAS, VECTOR, MIENTRAS, SI, ENTRADA, ENTONCES, SINO, FINSI, COMA, LBRACKET, RBRACKET;
terminal Integer    NUMBER;    
terminal Double    REALNUMBER;  
terminal Character CHAR;
terminal String IDENTIFIER, ENTERO, REAL, BOOLEANO, CARACTER;

/* Non terminals */
non terminal sent_flujo, condicional, bucle, expr_list, expr_listFlujo;
non terminal Double exprNum; 
non terminal Boolean exprBool;
non terminal String tipo, decl_variable, doubleDecl, varDecl, varDeclFlujo, doubleDeclFlujo;
non terminal Integer exprVector;
non terminal Character exprChar;

/* Precedences */
precedence left AND, OR;  
precedence nonassoc MORETHAN, LESSTHAN, ISEQUAL; 
precedence left PLUS, MINUS;  
precedence left TIMES, DIVISION;
precedence left UMINUS;

start with expr_list;

/* The grammar rules */			
expr_list 		::= expr_list exprNum:e SEMI        					{: System.out.println(e); :}
            	| exprNum:e SEMI                	    				{: System.out.println(e); :}
            	| expr_list exprBool:e SEMI      						{: System.out.println(e); :}
            	| exprBool:e SEMI               	    				{: System.out.println(e); :}
            	| expr_list exprChar:e SEMI     	    				{: System.out.println(e); :}
           		| exprChar:e SEMI               	    				{: System.out.println(e); :}
            	| expr_list varDecl:i SEMI         						{:  :}
            	| varDecl:i SEMI                   						{:  :}
            	| expr_list sent_flujo          						{:  :}
            	| sent_flujo  											{:  :}   
            	| error													{:	:}
            	;
            	
tipo      		::= ENTERO 												{: RESULT =  "ENTERO";		:}
				| REAL 													{: RESULT =  "REAL"; 		:}
				| BOOLEANO 												{: RESULT =  "BOOLEANO"; 	:}
				| CARACTER  											{: RESULT =  "CARACTER"; 	:}			
				;	
				
exprNum         ::= exprNum:e PLUS exprNum:e1          					{: 
																			if ( e == null || e1 == null ) {
																				parser.report_error( "No se puede realizar la suma porque hay una variable no asignada. \n", null );
																			}else  RESULT = e+e1;
																		:}
	            | exprNum:e MINUS exprNum: e1          					{: 
																			if ( e == null || e1 == null ) {
																				parser.report_error( "No se puede realizar la resta porque hay una variable no asignada. \n", null );
																			}else  RESULT = e-e1;
																		:}
	            | exprNum:e TIMES exprNum: e1          					{: 
																			if ( e == null || e1 == null ) {
																				parser.report_error( "No se puede realizar la multiplicación porque hay una variable no asignada. \n", null );
																			}else  RESULT = e*e1;
																		:}
	            | exprNum:e DIVISION exprNum: e1          				{: 
																			if ( e == null || e1 == null ) {
																				parser.report_error( "No se puede realizar la división porque hay una variable no asignada. \n", null );
																			}else  RESULT = e/e1;
																		:}
	            | MINUS exprNum:e                 						{: RESULT = -e;             							:}
	            | PLUS exprNum:e                 						{: RESULT = +e;            							 	:}	       
	            | LPAREN exprNum:e RPAREN          						{: RESULT = e;              							:}
	            | NUMBER:n												{: RESULT = Double.valueOf(n.intValue());          	    :}
	            | REALNUMBER: n				   							{: RESULT = n;              							:}
				| IDENTIFIER:i											{: 
																			simboloLista s = tabla.buscar(i);
																			if ( s.tipo != "ENTERO" && s.tipo != "REAL" ) {
																				parser.report_error( "La variable " + i + " no es de tipo numérico.\n", null );
																			}
																			else if ( s == null ) {
																				parser.report_error( "No hay un valor asignado a la variable " + i + ".\n", null );
																			}else  RESULT = s.valorD;
																		:}
				| IDENTIFIER:i exprVector:e								{: 
																			simboloLista s = tabla.buscar(i);
																			if ( s == null ) {
																				parser.report_error( "No existe el vector " + i + ".\n", null );
																			}else{
																				if(s.dimension2 != null){
																					parser.report_error( "El vector " + i + " no tiene doble dimensión.\n", null );
																				}
																				else if(s.tipo != "ENTERO" && s.tipo != "REAL"){
																					parser.report_error( "El vector " + i + " no es de tipo numérico.\n", null );
																				}else if(e >= s.dimension1){
																					parser.report_error( "El vector " + i + "[" + e + "] está fuera de límites.\n", null );
																				}else{
																					RESULT = s.valorDVector[e];
																					}
																				}
																		:}
				| IDENTIFIER:i exprVector:e	exprVector:e1				{: 
																			simboloLista s = tabla.buscar(i);
																			if ( s == null ) {
																				parser.report_error( "No existe el vector " + i + ".\n", null );
																			}else{
																				if(s.dimension2 == null){
																					parser.report_error( "El vector " + i + " tiene doble dimension no coinciden.\n", null );
																				} else if(s.tipo != "ENTERO" && s.tipo != "REAL"){
																					parser.report_error( "El vector " + i + " no es de tipo numérico.\n", null );
																				}else if(e >= s.dimension1 || e1>= s.dimension2){
																					parser.report_error( "El vector " + i + "[" + e + "][" + e1 + "] está fuera de límites.\n", null );
																				}else{
																					RESULT = s.valorDVector2[e][e1];
																				}
																			}
																		:}
				;

varDecl		    ::= tipo:t IDENTIFIER:i ASIGNATION exprNum:e     		{: 
																			simboloLista s = tabla.buscar(i);
																			if (s != null){
																				parser.report_error( "La variable " + i + " ya ha sido declarada.\n", null );
																			}
																			else if ( t != "ENTERO" && t != "REAL") {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + t + ".\n", null );
																			}else tabla.insertar(t,i,e,false,'0');	
																		:}
				| tipo:t IDENTIFIER:i ASIGNATION exprBool:e     		{: 
																			simboloLista s = tabla.buscar(i);
																			if (s != null){
																				parser.report_error( "La variable " + i + " ya ha sido declarada.\n", null );
																			}
																			else if ( t != "BOOLEANO" ) {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + t + ".\n", null );
																			}else tabla.insertar(t,i,0.0,e,'0');  	
																		:}
				| tipo:t IDENTIFIER:i ASIGNATION exprChar:e     		{: 
																			simboloLista s = tabla.buscar(i);
																			if (s != null){
																				parser.report_error( "La variable " + i + " ya ha sido declarada.\n", null );
																			}
																			else if ( t != "CARACTER" ) {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + t + ".\n", null );
																			}else tabla.insertar(t,i,0.0,false,e);  
																		:}
				| tipo:t IDENTIFIER:i ASIGNATION ENTRADA     		    {: 
																			simboloLista s = tabla.buscar(i);
																			if (s != null){
																				parser.report_error( "La variable " + i + " ya ha sido declarada.\n", null );
																			}else tabla.insertar(t,i,0.0,false,'0').isChanged = true;   
																		:}
				| tipo:t IDENTIFIER:i doubleDecl:d						{: 
																			simboloLista s = tabla.buscar(i);
																			if (s != null){
																				parser.report_error( "La variable " + i + " ya ha sido declarada.\n", null );
																			} else{
																				listID.add(i);
																				for(int j = 0; j < listID.size(); j++){
																				 	tabla.insertar(t,listID.get(j).toString(),0.0,false,'0');
																				}
																				listID.clear();
																			}	  
																  		:}				
				| IDENTIFIER:i ASIGNATION exprNum:e						{: 
																			simboloLista s = tabla.buscar(i);
																			if (s == null){
																				parser.report_error( "No existe la variable " + i + ".\n", null );
																			}
																			else if ( s.tipo != "ENTERO" && s.tipo != "REAL") {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + s.tipo + ".\n", null );
																			}else tabla.insertar(s.tipo,i,e,false,'0');	
																		:}
				| IDENTIFIER:i ASIGNATION ENTRADA						{: 
																			simboloLista s = tabla.buscar(i);
																			if (s == null){
																				parser.report_error( "No existe la variable " + i + ".\n", null );
																			} else{
																				s.isChanged = true;
																				tabla.put(i, s);
																			}
																		:}
				| IDENTIFIER:i ASIGNATION exprBool:e					{: 
																			simboloLista s = tabla.buscar(i);
																			if (s == null){
																				parser.report_error( "No existe la variable " + i + ".\n", null );
																			}else if ( s.tipo != "BOOLEANO" ) {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + s.tipo + ".\n", null);
																			}else tabla.insertar(s.tipo,i,0.0,e,'0');	
																		:}
				| IDENTIFIER:i ASIGNATION exprChar:e					{: 
																			simboloLista s = tabla.buscar(i);
																			if (s == null){
																				parser.report_error( "No existe la variable " + i + ".\n", null );
																			} else if ( s.tipo != "CARACTER" ) {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + s.tipo + ".\n", null );
																			}else tabla.insertar(s.tipo,i,0.0,false,e);	
																		:}
				| VECTOR tipo:t IDENTIFIER:i exprVector:e  													{: 
																												simboloLista s = tabla.buscar(i);
																												if (s != null){
																													parser.report_error( "El vector " + i + " ya ha sido declarado.\n", null );
																												} else tabla.insertarVector(t,i,0.0,false,'0',e,null); 
																											:}
				| VECTOR tipo:t IDENTIFIER:i exprVector:e exprVector:e1 									{: 
																												simboloLista s = tabla.buscar(i);
																												if (s != null){
																													parser.report_error( "El vector " + i + " ya ha sido declarado.\n", null );
																												} else tabla.insertarVector(t,i,0.0,false,'0',e,e1);
																											:}			
				| IDENTIFIER:i exprVector:e ASIGNATION exprNum:e1  											{: 
																												simboloLista s = tabla.buscar(i);
																												if ( s == null ) {
																													parser.report_error( "No existe el vector " + i + ".\n", null );
																												}else{
																													if(s.dimension2 != null){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque las dimensiones no coinciden.\n", null );
																													}
																													else if(s.tipo != "ENTERO" && s.tipo != "REAL"){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque este es de tipo " + s.tipo + ".\n", null );
																													}else if(e >= s.dimension1){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque la posición está fuera de límites.\n", null );
																													}else{
																														s.valorDVector[e] = e1;  
																														tabla.put(i, s);
																													}
																												}
																											:}
				| IDENTIFIER:i exprVector:e ASIGNATION exprBool:e1  										{: 
																												simboloLista s = tabla.buscar(i);
																												if ( s == null ) {
																													parser.report_error( "No existe el vector " + i + ".\n", null );
																												}else{
																													if(s.dimension2 != null){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque las dimensiones no coinciden.\n", null );
																													}
																													else if(s.tipo != "BOOLEANO"){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque este es de tipo " + s.tipo + ".\n", null );
																													}else if(e >= s.dimension1){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque la posición está fuera de límites.\n", null );
																													}else{
																														s.valorBVector[e] = e1;  
																														tabla.put(i, s);
																													}
																												}
																											:}
				| IDENTIFIER:i exprVector:e ASIGNATION exprChar:e1 											{: 
																												simboloLista s = tabla.buscar(i);
																												if ( s == null ) {
																													parser.report_error( "No existe el vector " + i + ".\n", null );
																												}else{
																													if(s.dimension2 != null){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque las dimensiones no coinciden.\n", null );
																													}
																													else if(s.tipo != "CARACTER"){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque este es de tipo " + s.tipo + ".\n", null );
																													}else if(e >= s.dimension1){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque la posición está fuera de límites.\n", null );
																													}else{
																														s.valorCVector[e] = e1;  
																														tabla.put(i, s);
																													}
																												}
																											:}
				| IDENTIFIER:i exprVector:e exprVector:e1 ASIGNATION exprNum:e2  							{: 
																												simboloLista s = tabla.buscar(i);
																												if ( s == null ) {
																													parser.report_error( "No existe el vector " + i + ".\n", null );
																												}else{
																													if(s.dimension2 == null){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque las dimensiones no coinciden.\n", null );
																													}
																													else if(s.tipo != "ENTERO" && s.tipo != "REAL"){
																														parser.report_error( "No se puede asignar el valor " + e2 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque este es de tipo " + s.tipo + ".\n", null );
																													}else if(e >= s.dimension1 || e1>= s.dimension2){
																														parser.report_error( "No se puede asignar el valor " + e2 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque la posición está fuera de límites.\n", null );
																													}else{
																														s.valorDVector2[e][e1] = e2;  
																														tabla.put(i, s);
																													}
																												}
																											:}
				| IDENTIFIER:i exprVector:e exprVector:e1 ASIGNATION exprBool:e2  						    {: 
																												simboloLista s = tabla.buscar(i);
																												if ( s == null ) {
																													parser.report_error( "No existe el vector " + i + ".\n", null );
																												}else{
																													if(s.dimension2 == null){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque las dimensiones no coinciden.\n", null );
																													}
																													else if(s.tipo != "BOOLEANO"){
																														parser.report_error( "No se puede asignar el valor " + e2 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque este es de tipo " + s.tipo + ".\n", null );
																													}else if(e >= s.dimension1 || e1>= s.dimension2){
																														parser.report_error( "No se puede asignar el valor " + e2 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque la posición está fuera de límites.\n", null );
																													}else{
																														s.valorBVector2[e][e1] = e2;  
																														tabla.put(i, s);
																													}
																												}
																											:}
				| IDENTIFIER:i exprVector:e exprVector:e1 ASIGNATION exprChar:e2 							{: 
																												simboloLista s = tabla.buscar(i);
																												if ( s == null ) {
																													parser.report_error( "No existe el vector " + i + ".\n", null );
																												}else{
																													if(s.dimension2 == null){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque las dimensiones no coinciden.\n", null );
																													}
																													else if(s.tipo != "CARACTER"){
																														parser.report_error( "No se puede asignar el valor " + e2 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque este es de tipo " + s.tipo + ".\n", null );
																													}else if(e >= s.dimension1 || e1>= s.dimension2){
																														parser.report_error( "No se puede asignar el valor " + e2 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque la posición está fuera de límites.\n", null );
																													}else{
																														s.valorCVector2[e][e1] = e2;  
																														tabla.put(i, s);
																													}
																												}
																											:}
          		;
          		
exprVector      ::= LBRACKET:b REALNUMBER:n RBRACKET:b1 				{: RESULT = n.intValue();  			:}
				| LBRACKET:b NUMBER:n RBRACKET:b1 						{: RESULT = n.intValue();  			:}
				;
				
doubleDecl      ::= COMA IDENTIFIER:i doubleDecl:d						{: listID.add(i);					:}
				| 														{: 									:}
				;
         		 	 	 
exprBool        ::= exprNum:e LESSTHAN exprNum:e1          				{:
																			if ( e == null || e1 == null ) {
																				parser.report_error( "No se puede realizar la comparación porque hay una variable no asignada. \n", null );
																			}else  {
																				if ( e < e1) RESULT = true; 										
																				else RESULT = false;	
																			}		
																		:} 
	            | exprNum:e MORETHAN exprNum:e1          				{:
																			if ( e == null || e1 == null ) {
																				parser.report_error( "No se puede realizar la comparación porque hay una variable no asignada. \n", null );
																			}else  {
																				if ( e > e1) RESULT = true; 										
																				else RESULT = false;	
																			}		
																		:}
	            | exprNum:e ISEQUAL exprNum:e1         					{:
																			if ( e == null || e1 == null ) {
																				parser.report_error( "No se puede realizar la comparación porque hay una variable no asignada. \n", null );
																			}else  {
																				if ( e == e1) RESULT = true; 										
																				else RESULT = false;	
																			}	
																		:}
				| TRUE													{: RESULT = true;  					:}
				| FALSE													{: RESULT = false; 					:}
				| exprBool:e AND exprBool:e1							{:
																			if ( e == null || e1 == null ) {
																				parser.report_error( "No se puede realizar la comparación porque hay una variable no asignada. \n", null );
																			}else  {
																				if ( e && e1) RESULT = true; 										
																				else RESULT = false;	
																			}
																		:}
			    | exprBool:e OR exprBool:e1								{:
																			if ( e == null || e1 == null ) {
																				parser.report_error( "No se puede realizar la comparación porque hay una variable no asignada. \n", null );
																			}else  {
																				if ( e || e1) RESULT = true; 										
																				else RESULT = false;	
																			}
																		:}
				| NOT exprBool:e1										{:
																			if ( e1 == null ) {
																				parser.report_error( "No se puede realizar la comparación porque hay una variable no asignada. \n", null );
																			}else  {
																				if (e1) RESULT = false; 										
																				else RESULT = true;	
																			}	
																		:}
			 	| LPAREN exprBool:e RPAREN          					{: RESULT = e;              							:}
				;
				
exprChar        ::= CHAR:c												{: RESULT = c;                      :}
				;
				
sent_flujo      ::= condicional											{:  :}
				| bucle													{:  :}
			    ;
			    
condicional     ::= SI exprBool:e ENTONCES expr_listFlujo:i FINSI 												{:  
																													for(int j = 0; j < listIDFlujo.size(); j++){
																				 										simboloLista s = tabla.buscar(listIDFlujo.get(j).toString()); 
																														s.isChanged = true;  
																														tabla.put(listIDFlujo.get(j).toString(), s);
																													}
																													listIDFlujo.clear();	  
																												:}
				| SI exprBool:e ENTONCES expr_listFlujo:i1 SINO expr_listFlujo:i2 FINSI 						{:  
																													for(int j = 0; j < listIDFlujo.size(); j++){
																				 										simboloLista s = tabla.buscar(listIDFlujo.get(j).toString()); 
																														s.isChanged = true;  
																														tabla.put(listIDFlujo.get(j).toString(), s);
																													}
																													listIDFlujo.clear();	  
																												:}				
			    ;
			  
bucle		    ::= MIENTRAS exprBool:e expr_listFlujo:e1 FINMIENTRAS 											{:  
																													for(int j = 0; j < listIDFlujo.size(); j++){
																				 										simboloLista s = tabla.buscar(listIDFlujo.get(j).toString()); 
																														s.isChanged = true;  
																														tabla.put(listIDFlujo.get(j).toString(), s);
																													}
																													listIDFlujo.clear();	  
																												:}
				;
				
expr_listFlujo  ::= expr_listFlujo exprNum:e SEMI        				{: System.out.println(e); :}
            	| exprNum:e SEMI                	    				{: System.out.println(e); :}
            	| expr_listFlujo exprBool:e SEMI      					{: System.out.println(e); :}
            	| exprBool:e SEMI               	    				{: System.out.println(e); :}
            	| expr_listFlujo exprChar:e SEMI     	    			{: System.out.println(e); :}
           		| exprChar:e SEMI               	    				{: System.out.println(e); :}
            	| expr_listFlujo varDeclFlujo:i SEMI         			{:  :}
            	| varDeclFlujo:i SEMI                   				{:  :}
            	| expr_listFlujo sent_flujo          					{:  :}
            	| sent_flujo  											{:  :}   
				;
				
varDeclFlujo	::= tipo:t IDENTIFIER:i ASIGNATION exprNum:e     		{: 
																			simboloLista s = tabla.buscar(i);
																			if (s != null){
																				parser.report_error( "La variable " + i + " ya ha sido declarada.\n", null );
																			}
																			else if ( t != "ENTERO" && t != "REAL") {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + t + ".\n", null );
																			}else tabla.insertar(t,i,e,false,'0');	
																		:}
				| tipo:t IDENTIFIER:i ASIGNATION exprBool:e     		{: 
																			simboloLista s = tabla.buscar(i);
																			if (s != null){
																				parser.report_error( "La variable " + i + " ya ha sido declarada.\n", null );
																			}
																			else if ( t != "BOOLEANO" ) {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + t + ".\n", null );
																			}else tabla.insertar(t,i,0.0,e,'0');  	
																		:}
				| tipo:t IDENTIFIER:i ASIGNATION exprChar:e     		{: 
																			simboloLista s = tabla.buscar(i);
																			if (s != null){
																				parser.report_error( "La variable " + i + " ya ha sido declarada.\n", null );
																			}
																			else if ( t != "CARACTER" ) {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + t + ".\n", null );
																			}else tabla.insertar(t,i,0.0,false,e);  
																		:}
				| tipo:t IDENTIFIER:i ASIGNATION ENTRADA     		    {: 
																			simboloLista s = tabla.buscar(i);
																			if (s != null){
																				parser.report_error( "La variable " + i + " ya ha sido declarada.\n", null );
																			}else tabla.insertar(t,i,0.0,false,'0').isChanged = true;   
																		:}
				| tipo:t  IDENTIFIER:i doubleDecl:d						{: 
																			simboloLista s = tabla.buscar(i);
																			if (s != null){
																				parser.report_error( "La variable " + i + " ya ha sido declarada.\n", null );
																			} else{
																				listID.add(i);
																				for(int j = 0; j < listID.size(); j++){
																				 	tabla.insertar(t,listID.get(j).toString(),0.0,false,'0');
																				}
																				listID.clear();
																			}	  
																  		:}					
				| IDENTIFIER:i ASIGNATION exprNum:e						{: 
																			simboloLista s = tabla.buscar(i);
																			if (s == null){
																				parser.report_error( "No existe la variable " + i + ".\n", null );
																			}
																			else if ( s.tipo != "ENTERO" && s.tipo != "REAL") {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + s.tipo + ".\n", null );
																			}else{
																				tabla.insertar(s.tipo,i,e, false,'0');
																				listIDFlujo.add(i);
																			}
																		:}
				| IDENTIFIER:i ASIGNATION ENTRADA						{: 
																			simboloLista s = tabla.buscar(i);
																			if (s == null){
																				parser.report_error( "No existe la variable " + i + ".\n", null );
																			} else{
																				s.isChanged = true;
																				tabla.put(i, s);
																			}
																		:}
				| IDENTIFIER:i ASIGNATION exprBool:e					{: 
																			simboloLista s = tabla.buscar(i);
																			if (s == null){
																				parser.report_error( "No existe la variable " + i + ".\n", null );
																			}else if ( s.tipo != "BOOLEANO" ) {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + s.tipo + ".\n", null);
																			}else{
																				tabla.insertar(s.tipo,i,0.0,e,'0');
																				listIDFlujo.add(i);
																			}	
																		:}
				| IDENTIFIER:i ASIGNATION exprChar:e					{: 
																			simboloLista s = tabla.buscar(i);
																			if (s == null){
																				parser.report_error( "No existe la variable " + i + ".\n", null );
																			} else if ( s.tipo != "CARACTER" ) {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + s.tipo + ".\n", null );
																			}else{ 
																				tabla.insertar(s.tipo,i,0.0,false,e);
																				listIDFlujo.add(i);
																			}
																		:}
				| VECTOR tipo:t IDENTIFIER:i exprVector:e  													{: 
																												simboloLista s = tabla.buscar(i);
																												if (s != null){
																													parser.report_error( "El vector " + i + " ya ha sido declarado.\n", null );
																												} else tabla.insertarVector(t,i,0.0,false,'0',e,null); 
																											:}
				| VECTOR tipo:t IDENTIFIER:i exprVector:e exprVector:e1 									{: 
																												simboloLista s = tabla.buscar(i);
																												if (s != null){
																													parser.report_error( "El vector " + i + " ya ha sido declarado.\n", null );
																												} else tabla.insertarVector(t,i,0.0,false,'0',e,e1);
																											:}			
				| IDENTIFIER:i exprVector:e ASIGNATION exprNum:e1  											{: 
																												simboloLista s = tabla.buscar(i);
																												if ( s == null ) {
																													parser.report_error( "No existe el vector " + i + ".\n", null );
																												}else{
																													if(s.dimension2 != null){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque las dimensiones no coinciden.\n", null );
																													}
																													else if(s.tipo != "ENTERO" && s.tipo != "REAL"){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque este es de tipo " + s.tipo + ".\n", null );
																													}else if(e >= s.dimension1){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque la posición está fuera de límites.\n", null );
																													}else{
																														s.valorDVector[e] = e1;  
																														tabla.put(i, s);
																														listIDFlujo.add(i);
																													}
																												}
																											:}
				| IDENTIFIER:i exprVector:e ASIGNATION exprBool:e1  										{: 
																												simboloLista s = tabla.buscar(i);
																												if ( s == null ) {
																													parser.report_error( "No existe el vector " + i + ".\n", null );
																												}else{
																													if(s.dimension2 != null){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque las dimensiones no coinciden.\n", null );
																													}
																													else if(s.tipo != "BOOLEANO"){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque este es de tipo " + s.tipo + ".\n", null );
																													}else if(e >= s.dimension1){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque la posición está fuera de límites.\n", null );
																													}else{
																														s.valorBVector[e] = e1;  
																														tabla.put(i, s);
																														listIDFlujo.add(i);
																													}
																												}
																											:}
				| IDENTIFIER:i exprVector:e ASIGNATION exprChar:e1 											{: 
																												simboloLista s = tabla.buscar(i);
																												if ( s == null ) {
																													parser.report_error( "No existe el vector " + i + ".\n", null );
																												}else{
																													if(s.dimension2 != null){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque las dimensiones no coinciden.\n", null );
																													}
																													else if(s.tipo != "CARACTER"){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque este es de tipo " + s.tipo + ".\n", null );
																													}else if(e >= s.dimension1){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "] porque la posición está fuera de límites.\n", null );
																													}else{
																														s.valorCVector[e] = e1;  
																														tabla.put(i, s);
																														listIDFlujo.add(i);
																													}
																												}
																											:}
				| IDENTIFIER:i exprVector:e exprVector:e1 ASIGNATION exprNum:e2  							{: 
																												simboloLista s = tabla.buscar(i);
																												if ( s == null ) {
																													parser.report_error( "No existe el vector " + i + ".\n", null );
																												}else{
																													if(s.dimension2 == null){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque las dimensiones no coinciden.\n", null );
																													}
																													else if(s.tipo != "ENTERO" && s.tipo != "REAL"){
																														parser.report_error( "No se puede asignar el valor " + e2 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque este es de tipo " + s.tipo + ".\n", null );
																													}else if(e >= s.dimension1 || e1 >= s.dimension2){
																														parser.report_error( "No se puede asignar el valor " + e2 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque la posición está fuera de límites.\n", null );
																													}else{
																														s.valorDVector2[e][e1] = e2;  
																														tabla.put(i, s);
																														listIDFlujo.add(i);
																													}
																												}
																											:}
				| IDENTIFIER:i exprVector:e exprVector:e1 ASIGNATION exprBool:e2  						    {: 
																												simboloLista s = tabla.buscar(i);
																												if ( s == null ) {
																													parser.report_error( "No existe el vector " + i + ".\n", null );
																												}else{
																													if(s.dimension2 == null){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque las dimensiones no coinciden.\n", null );
																													}
																													else if(s.tipo != "BOOLEANO"){
																														parser.report_error( "No se puede asignar el valor " + e2 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque este es de tipo " + s.tipo + ".\n", null );
																													}else if(e >= s.dimension1 || e1 >= s.dimension2){
																														parser.report_error( "No se puede asignar el valor " + e2 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque la posición está fuera de límites.\n", null );
																													}else{
																														s.valorBVector2[e][e1] = e2;  
																														tabla.put(i, s);
																														listIDFlujo.add(i);
																													}
																												}
																											:}
				| IDENTIFIER:i exprVector:e exprVector:e1 ASIGNATION exprChar:e2 							{: 
																												simboloLista s = tabla.buscar(i);
																												if ( s == null ) {
																													parser.report_error( "No existe el vector " + i + ".\n", null );
																												}else{
																													if(s.dimension2 == null){
																														parser.report_error( "No se puede asignar el valor " + e1 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque las dimensiones no coinciden.\n", null );
																													}
																													else if(s.tipo != "CARACTER"){
																														parser.report_error( "No se puede asignar el valor " + e2 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque este es de tipo " + s.tipo + ".\n", null );
																													}else if(e >= s.dimension1 || e1 >= s.dimension2){
																														parser.report_error( "No se puede asignar el valor " + e2 + " al vector " + i + "[" + e + "]" + "[" + e1 + "] porque la posición está fuera de límites.\n", null );
																													}else{
																														s.valorCVector2[e][e1] = e2;  
																														tabla.put(i, s);
																														listIDFlujo.add(i);
																													}
																												}
																											:}
          		;
          		
doubleDeclFlujo ::= COMA IDENTIFIER:i doubleDeclFlujo:d						{: listID.add(i);	listIDFlujo.add(i);		:}
				| 															{: 											:}
				;			  			  			 	 	 	 	     	