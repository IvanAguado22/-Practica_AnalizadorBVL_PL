/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.Scanner;
import java.util.ArrayList;  

parser code {:
  protected Lexer lexer;
  public tablaSimbolos tabla = new tablaSimbolos();
  String id = "";
  ArrayList listID = new ArrayList();
  ArrayList listIDFlujo = new ArrayList();
:};

action code {:
:};

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal           SEMI, PLUS, MINUS, TIMES, DIVISION, UMINUS, LPAREN, RPAREN,
EQUAL, TRUE, FALSE, ASIGNATION, MORETHAN, LESSTHAN, ISEQUAL, AND, NOT, OR, 
FINMIENTRAS, VECTOR, MIENTRAS, SI, ENTRADA, ENTONCES, SINO, FINSI, COMA, LBRACKET, RBRACKET;
terminal Double    NUMBER;        // our scanner provides numbers as doubles
terminal Character CHAR;
terminal String IDENTIFIER, ENTERO, REAL, BOOLEANO, CARACTER;

/* Non terminals */
non terminal  sentencia, sent_flujo, asignacion, condicional, bucle, expr_list, expr_listFlujo;
non terminal Double exprNum;      // used to store evaluated subexpressions
non terminal Boolean exprBool;
non terminal String tipo, decl_variable, doubleDecl, doubleDeclExtra, varDecl, varDeclFlujo, doubleDeclFlujo;
non terminal Integer exprVector;
non terminal Character exprChar;

/* Precedences */
precedence left AND, OR;  
precedence nonassoc MORETHAN, LESSTHAN, ISEQUAL; 
precedence left PLUS, MINUS;  
precedence left TIMES, DIVISION;
precedence left UMINUS;

start with expr_list;

/* The grammar rules */			
expr_list 		::= expr_list exprNum:e SEMI        					{: System.out.println(e); :}
            	| exprNum:e SEMI                	    				{: System.out.println(e); :}
            	| expr_list exprBool:e SEMI      						{: System.out.println(e); :}
            	| exprBool:e SEMI               	    				{: System.out.println(e); :}
            	| expr_list exprChar:e SEMI     	    				{: System.out.println(e); :}
           		| exprChar:e SEMI               	    				{: System.out.println(e); :}
            	| expr_list varDecl:i SEMI         						{:  :}
            	| varDecl:i SEMI                   						{:  :}
            	| expr_list sent_flujo          						{:  :}
            	| sent_flujo  											{:  :}   
            	| error													{:	:}
            	;
            	
tipo      		::= ENTERO 												{: RESULT =  "ENTERO";		:}
				| REAL 													{: RESULT =  "REAL"; 		:}
				| BOOLEANO 												{: RESULT =  "BOOLEANO"; 	:}
				| CARACTER  											{: RESULT =  "CARACTER"; 	:}			
				;	
				
exprNum         ::= exprNum:e PLUS exprNum:e1          					{: 
																			if ( e == null || e1 == null ) {
																				parser.report_error( "No se puede realizar la suma porque hay una variable no asignada ", new Symbol( sym.IDENTIFIER, e ) );
																			}else  RESULT = e+e1;
																		:}
	            | exprNum:e MINUS exprNum: e1          					{: 
																			if ( e == null || e1 == null ) {
																				parser.report_error( "No se puede realizar la resta porque hay una variable no asignada ", new Symbol( sym.IDENTIFIER, e ) );
																			}else  RESULT = e-e1;
																		:}
	            | exprNum:e TIMES exprNum: e1          					{: 
																			if ( e == null || e1 == null ) {
																				parser.report_error( "No se puede realizar la multiplicación porque hay una variable no asignada ", new Symbol( sym.IDENTIFIER, e ) );
																			}else  RESULT = e*e1;
																		:}
	            | exprNum:e DIVISION exprNum: e1          				{: 
																			if ( e == null || e1 == null ) {
																				parser.report_error( "No se puede realizar la división porque hay una variable no asignada ", new Symbol( sym.IDENTIFIER, e ) );
																			}else  RESULT = e/e1;
																		:}
	            | MINUS exprNum:e                 						{: RESULT = -e;             :}
	            | PLUS exprNum:e                 						{: RESULT = +e;             :}	       
	            | LPAREN exprNum:e RPAREN          						{: RESULT = e;              :}
				| NUMBER: n				   								{: RESULT = n;              :}
				| IDENTIFIER:i											{: 
																			simboloLista s = tabla.buscar(i);
																			if ( s == null ) {
																				parser.report_error( "No hay un valor asignado a la variable " + i, new Symbol( sym.IDENTIFIER, i ) );
																			}else  RESULT = s.valorD;
																		:}
				;

varDecl		    ::= tipo:t IDENTIFIER:i ASIGNATION exprNum:e     		{: 
																			if ( t != "ENTERO" ) {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + t, new Symbol( sym.IDENTIFIER, i ) );
																			}else tabla.insertar(t,i,e,null,null);	
																		:}
				| tipo:t IDENTIFIER:i ASIGNATION exprBool:e     		{: 
																			if ( t != "BOOLEANO" ) {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + t, new Symbol( sym.IDENTIFIER, i ) );
																			}else tabla.insertar(t,i,null,e,null);  	
																		:}
				| tipo:t IDENTIFIER:i ASIGNATION exprChar:e     		{: 
																			if ( t != "CARACTER" ) {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + t, new Symbol( sym.IDENTIFIER, i ) );
																			}else tabla.insertar(t,i,null,null,e);  	
																		:}
				| tipo:t IDENTIFIER:i ASIGNATION ENTRADA     		    {: tabla.insertar(t,i,null,null,null);   	:}
				| tipo:t IDENTIFIER:i doubleDecl:d						{: listID.add(i);
																			for(int j = 0; j < listID.size(); j++){
																				 tabla.insertar(t,listID.get(j).toString(),null,null,null);
																			}
																			listID.clear();			  
																  		:}				
				| IDENTIFIER:i ASIGNATION exprNum:e						{: 
																			simboloLista s = tabla.buscar(i);
																			if ( s.tipo != "ENTERO" ) {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + s.tipo, new Symbol( sym.IDENTIFIER, i ) );
																			}else tabla.insertar(s.tipo,i,e,null,null);	
																		:}
				| IDENTIFIER:i ASIGNATION ENTRADA						{: simboloLista s = tabla.buscar(i); s.isChanged = true;
															  			tabla.put(i, s);  	:}
				| IDENTIFIER:i ASIGNATION exprBool:e					{: 
																			simboloLista s = tabla.buscar(i);
																			if ( s.tipo != "BOOLEANO" ) {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + s.tipo, new Symbol( sym.IDENTIFIER, i ) );
																			}else tabla.insertar(s.tipo,i,null,e,null);	
																		:}
				| IDENTIFIER:i ASIGNATION exprChar:e					{: 
																			simboloLista s = tabla.buscar(i);
																			if ( s.tipo != "CARACTER" ) {
																				parser.report_error( "No se puede asignar el valor " + e + " a la variable " + i + " porque esta es de tipo " + s.tipo, new Symbol( sym.IDENTIFIER, i ) );
																			}else tabla.insertar(s.tipo,i,null,null,e);	
																		:}
				| VECTOR tipo:t IDENTIFIER:i exprVector:e  													{: tabla.insertarVector(t,i,null,null,null,e,null);	 :}
				| VECTOR tipo:t IDENTIFIER:i exprVector:e exprVector:e1 									{: tabla.insertarVector(t,i,null,null,null,e,e1);  	:}				
				| IDENTIFIER:i exprVector:e ASIGNATION exprNum:e1  											{: simboloLista s = tabla.buscar(i); s.valorDVector[e] = e1;  tabla.put(i, s);  	:}
				| IDENTIFIER:i exprVector:e ASIGNATION exprBool:e1  										{: simboloLista s = tabla.buscar(i); s.valorBVector[e] = e1;  tabla.put(i, s);  	:}
				| IDENTIFIER:i exprVector:e ASIGNATION exprChar:e1 											{: simboloLista s = tabla.buscar(i); s.valorCVector[e] = e1;  tabla.put(i, s);  	:}
				| IDENTIFIER:i exprVector:e exprVector:e1 ASIGNATION exprNum:e2  							{: simboloLista s = tabla.buscar(i); s.valorDVector2[e][e1] = e2;  tabla.put(i, s); :}
				| IDENTIFIER:i exprVector:e exprVector:e1 ASIGNATION exprBool:e2  						    {: simboloLista s = tabla.buscar(i); s.valorBVector2[e][e1] = e2;  tabla.put(i, s); :}
				| IDENTIFIER:i exprVector:e exprVector:e1 ASIGNATION exprChar:e2 							{: simboloLista s = tabla.buscar(i); s.valorCVector2[e][e1] = e2;  tabla.put(i, s); :}								
          		;
          		
exprVector      ::= LBRACKET:b NUMBER:n RBRACKET:b1 					{: RESULT = n.intValue();  			:}
				;
				
doubleDecl      ::= COMA IDENTIFIER:i doubleDecl:d						{: listID.add(i);			:}
				| 														{: 			:}
				;
         		 	 	 
exprBool        ::= exprNum:e LESSTHAN exprNum:e1          				{: if ( e < e1) RESULT = true; 										
																		else RESULT = false;		 	  	:} 
	            | exprNum:e MORETHAN exprNum:e1          				{: if ( e > e1) RESULT = true; 										
																		else RESULT = false;		 	  	:} 
	            | exprNum:e ISEQUAL exprNum:e1         					{: if ( e == e1) RESULT = true; 										
																		else RESULT = false;		 	 	:}
				| TRUE													{: RESULT = true;  					:}
				| FALSE													{: RESULT = false; 					:}
				| exprBool:e AND exprBool:e1								{: if (e && e1) RESULT = true;
																		else RESULT = false; 				:}
			    | exprBool:e OR exprBool:e1								{: if (e || e1) RESULT = true;
																		else RESULT = false; 				:}
				| NOT exprBool:e1										{: if (e1) RESULT = false;
																		else RESULT = true; 				:}
				;
				
exprChar        ::= CHAR:c												{: RESULT = c;                      :}
				;
				
sent_flujo      ::= condicional											{:  :}
				| bucle													{:  :}
			    ;
			    
condicional     ::= SI exprBool:e ENTONCES expr_listFlujo:i FINSI 												{:  for(int j = 0; j < listIDFlujo.size(); j++){
																				 										simboloLista s = tabla.buscar(listIDFlujo.get(j).toString()); s.isChanged = true;  tabla.put(listIDFlujo.get(j).toString(), s);
																												}
																												listIDFlujo.clear();	  :}
				| SI exprBool:e ENTONCES expr_listFlujo:i1 SINO expr_listFlujo:i2 FINSI 						{:  for(int j = 0; j < listIDFlujo.size(); j++){
																				 										simboloLista s = tabla.buscar(listIDFlujo.get(j).toString()); s.isChanged = true;  tabla.put(listIDFlujo.get(j).toString(), s);
																												}
																												listIDFlujo.clear();	  :}				
			    ;
			  
bucle		    ::= MIENTRAS exprBool:e expr_listFlujo:e1 FINMIENTRAS 											{:  for(int j = 0; j < listIDFlujo.size(); j++){
																				 										simboloLista s = tabla.buscar(listIDFlujo.get(j).toString()); s.isChanged = true;  tabla.put(listIDFlujo.get(j).toString(), s);
																												}
																												listIDFlujo.clear();	  :}
				;
				
expr_listFlujo  ::= expr_listFlujo exprNum:e SEMI        				{: System.out.println(e); :}
            	| exprNum:e SEMI                	    				{: System.out.println(e); :}
            	| expr_listFlujo exprBool:e SEMI      						{: System.out.println(e); :}
            	| exprBool:e SEMI               	    				{: System.out.println(e); :}
            	| expr_listFlujo exprChar:e SEMI     	    				{: System.out.println(e); :}
           		| exprChar:e SEMI               	    				{: System.out.println(e); :}
            	| expr_listFlujo varDeclFlujo:i SEMI         				{:  :}
            	| varDeclFlujo:i SEMI                   				{:  :}
            	| expr_listFlujo sent_flujo          						{:  :}
            	| sent_flujo  											{:  :}   
				;
				
varDeclFlujo	::= tipo:t IDENTIFIER:i ASIGNATION exprNum:e     		{: tabla.insertar(t,i,e,null,null); listIDFlujo.add(i); 	:}
				| tipo:t IDENTIFIER:i ASIGNATION exprBool:e     		{: tabla.insertar(t,i,null,e,null); listIDFlujo.add(i); 	:}
				| tipo:t IDENTIFIER:i ASIGNATION exprChar:e     		{: tabla.insertar(t,i,null,null,e); listIDFlujo.add(i);  	:}
				| tipo:t IDENTIFIER:i ASIGNATION ENTRADA     		    {: tabla.insertar(t,i,null,null,null); listIDFlujo.add(i);  :}
				| tipo:t  IDENTIFIER:i doubleDecl:d						{: listID.add(i);
																			for(int j = 0; j < listID.size(); j++){
																				 tabla.insertar(t,listID.get(j).toString(),null,null,null);
																			}
																			listID.clear();			  
																  		:}				
				| IDENTIFIER:i ASIGNATION exprNum:e						{: simboloLista s = tabla.buscar(i);
															  			tabla.insertar(s.tipo,i,e,null,null); listIDFlujo.add(i);  	:}
				| IDENTIFIER:i ASIGNATION ENTRADA						{: simboloLista s = tabla.buscar(i); s.isChanged = true;
															  			tabla.put(i, s);  	:}
				| IDENTIFIER:i ASIGNATION exprBool:e					{: simboloLista s = tabla.buscar(i);
															  			tabla.insertar(s.tipo,i,null,e,null); listIDFlujo.add(i); 	:}
				| IDENTIFIER:i ASIGNATION exprChar:e					{: simboloLista s = tabla.buscar(i);
															  			tabla.insertar(s.tipo,i,null,null,e); listIDFlujo.add(i); 	:}
				| VECTOR tipo:t IDENTIFIER:i exprVector:e  													{: tabla.insertarVector(t,i,null,null,null,e,null);	listIDFlujo.add(i); :}
				| VECTOR tipo:t IDENTIFIER:i exprVector:e exprVector:e1 									{: tabla.insertarVector(t,i,null,null,null,e,e1); listIDFlujo.add(i); 	:}				
				| IDENTIFIER:i exprVector:e ASIGNATION exprNum:e1  											{: simboloLista s = tabla.buscar(i); s.valorDVector[e] = e1;  tabla.put(i, s); listIDFlujo.add(i); 	:}
				| IDENTIFIER:i exprVector:e ASIGNATION exprBool:e1  										{: simboloLista s = tabla.buscar(i); s.valorBVector[e] = e1;  tabla.put(i, s); listIDFlujo.add(i); 	:}
				| IDENTIFIER:i exprVector:e ASIGNATION exprChar:e1 											{: simboloLista s = tabla.buscar(i); s.valorCVector[e] = e1;  tabla.put(i, s); listIDFlujo.add(i); 	:}
				| IDENTIFIER:i exprVector:e exprVector:e1 ASIGNATION exprNum:e2  							{: simboloLista s = tabla.buscar(i); s.valorDVector2[e][e1] = e2;  tabla.put(i, s); listIDFlujo.add(i); 	:}
				| IDENTIFIER:i exprVector:e exprVector:e1 ASIGNATION exprBool:e2  						    {: simboloLista s = tabla.buscar(i); s.valorBVector2[e][e1] = e2;  tabla.put(i, s); listIDFlujo.add(i);  :}
				| IDENTIFIER:i exprVector:e exprVector:e1 ASIGNATION exprChar:e2 							{: simboloLista s = tabla.buscar(i); s.valorCVector2[e][e1] = e2;  tabla.put(i, s); listIDFlujo.add(i); :}								
          		;
          		
doubleDeclFlujo ::= COMA IDENTIFIER:i doubleDeclFlujo:d						{: listID.add(i);	listIDFlujo.add(i);		:}
				| 															{: 			:}
				;			  			  			 	 	 	 	     	